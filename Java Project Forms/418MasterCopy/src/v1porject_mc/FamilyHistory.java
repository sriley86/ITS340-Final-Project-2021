package v1porject_mc;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static v1porject_mc.AllergyHistory.PatientID;
import v1porject_mc.PatientDemographics;
import static v1porject_mc.PatientDemographics.getCurrentPatientID;
import static v1porject_mc.PatientDemographics.tabledemographics;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author sharylriley
 */
public class FamilyHistory extends javax.swing.JFrame {
    
    /**
     * Creates new form PatientDemographics
     */
    public FamilyHistory(String patientID) {
        initComponents();
        initializePatientIdField(patientID);
        table_update();
        
        
        // default settings  
        toggleEditAndBackground();
        isNew = false;
        backGround = Color.lightGray;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonGenMedHisForm = new javax.swing.JButton();
        buttonImmunizationHisForm = new javax.swing.JButton();
        buttonMedicationHisForm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        buttonSaveFamiliyMem = new javax.swing.JButton();
        buttonEditFamiliyMem = new javax.swing.JButton();
        buttonDeleteFamiliyMem = new javax.swing.JButton();
        buttonAddFamiliyMem = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        FamilyID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        buttonAllergyHisForm = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        MajorDisorder = new javax.swing.JTextField();
        Name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Relation = new javax.swing.JTextField();
        buttonCloseFamiliyMemForm = new javax.swing.JButton();
        SpecificTypeDisorder = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CheckBoxDisorderHRF = new javax.swing.JCheckBox();
        CheckBoxAlive = new javax.swing.JCheckBox();
        checkboxLivesWPatient = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        PatientID = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select Family Record");

        buttonGenMedHisForm.setText("General Medical History Form");
        buttonGenMedHisForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenMedHisFormActionPerformed(evt);
            }
        });

        buttonImmunizationHisForm.setText("Immunization History Form");
        buttonImmunizationHisForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImmunizationHisFormActionPerformed(evt);
            }
        });

        buttonMedicationHisForm.setText("Medication History Form");
        buttonMedicationHisForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMedicationHisFormActionPerformed(evt);
            }
        });

        jLabel2.setText("Family History Form");

        buttonSaveFamiliyMem.setText("Save Family Record");
        buttonSaveFamiliyMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveFamiliyMemActionPerformed(evt);
            }
        });

        buttonEditFamiliyMem.setText("Edit Selected Family Member");
        buttonEditFamiliyMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditFamiliyMemActionPerformed(evt);
            }
        });

        buttonDeleteFamiliyMem.setText("Delete Selected Family Member");
        buttonDeleteFamiliyMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteFamiliyMemActionPerformed(evt);
            }
        });

        buttonAddFamiliyMem.setText("Add New Family Member");
        buttonAddFamiliyMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddFamiliyMemActionPerformed(evt);
            }
        });

        jLabel3.setText("Family ID:");

        FamilyID.setEditable(false);
        FamilyID.setBackground(java.awt.Color.pink);

        jLabel8.setText("jLabel8");

        jLabel15.setText("Access Forms:");

        buttonAllergyHisForm.setText("Allergy History Form");
        buttonAllergyHisForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAllergyHisFormActionPerformed(evt);
            }
        });

        jLabel28.setText("Name:");

        jLabel29.setText(" Major Disorder:");

        MajorDisorder.setText(" ");

        jLabel5.setText("Relation:");

        buttonCloseFamiliyMemForm.setText("Close");
        buttonCloseFamiliyMemForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseFamiliyMemFormActionPerformed(evt);
            }
        });

        SpecificTypeDisorder.setText(" ");
        SpecificTypeDisorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpecificTypeDisorderActionPerformed(evt);
            }
        });

        jLabel7.setText("Specific Type Disorder:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Family ID", "Name", "Relation"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        CheckBoxDisorderHRF.setText("Disorder HRF");
        CheckBoxDisorderHRF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckBoxDisorderHRFMouseClicked(evt);
            }
        });

        CheckBoxAlive.setText("Alive");
        CheckBoxAlive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxAliveActionPerformed(evt);
            }
        });

        checkboxLivesWPatient.setText("Lives with Patient");
        checkboxLivesWPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxLivesWPatientActionPerformed(evt);
            }
        });

        jLabel4.setText("Patient ID:");

        PatientID.setEditable(false);
        PatientID.setBackground(java.awt.Color.pink);

        UpdateButton.setText("Update Data");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SpecificTypeDisorder)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 344, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(726, 726, 726))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonGenMedHisForm, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonAllergyHisForm, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonImmunizationHisForm, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonMedicationHisForm, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonAddFamiliyMem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSaveFamiliyMem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDeleteFamiliyMem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonEditFamiliyMem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonCloseFamiliyMemForm))
                            .addComponent(jLabel29)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(FamilyID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel28)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Relation))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(MajorDisorder)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkboxLivesWPatient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckBoxAlive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckBoxDisorderHRF))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel15))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(buttonGenMedHisForm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonAllergyHisForm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImmunizationHisForm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonMedicationHisForm))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAddFamiliyMem)
                            .addComponent(buttonSaveFamiliyMem)
                            .addComponent(buttonDeleteFamiliyMem)
                            .addComponent(buttonEditFamiliyMem)
                            .addComponent(buttonCloseFamiliyMemForm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UpdateButton)
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(FamilyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Relation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkboxLivesWPatient)
                            .addComponent(CheckBoxAlive)
                            .addComponent(CheckBoxDisorderHRF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MajorDisorder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpecificTypeDisorder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_update()
    {
        int c;
        
        String InsertSql = ("select * from familyhistorytable WHERE PatientID = " +  PatientID.getText());
        try
        {
            //register drive class
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, "root","P@ssw0rd");
            PreparedStatement ps = con.prepareStatement(InsertSql);
            
            Statement  stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(InsertSql);
            
            ResultSetMetaData Rss = rs.getMetaData();
            c = Rss.getColumnCount();
            
            DefaultTableModel Df = (DefaultTableModel)jTable1.getModel();
            Df.setRowCount(0);
            
            ///updates jTable columns and rows
            while(rs.next())
            {
                PatientID.setText(rs.getString("PatientID")) ;
                
                Vector v2 = new Vector();
                for(int i=1;i<=c;i++)
                {
                    v2.add(rs.getString("FamilyID"));
                    v2.add(rs.getString("Name"));
                    v2.add(rs.getString("Relation"));
                 
                }
                
                
                Df.addRow(v2);
            }

            con.close();
            
        }
        catch(SQLException e)
        {
            
            System.out.println("Error executing tableupdate Operation");
            e.printStackTrace();
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
    }
    private void buttonMedicationHisFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMedicationHisFormActionPerformed
        // TODO add your handling code here:
         //calls Medication History Form
        MedicationHistory form = new MedicationHistory(getCurrentPatientID());
        form.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_buttonMedicationHisFormActionPerformed

    private void buttonImmunizationHisFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImmunizationHisFormActionPerformed
        // TODO add your handling code here:
        // calls Immunization Form
        ImmunizationHistory form = new ImmunizationHistory(getCurrentPatientID());
        form.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_buttonImmunizationHisFormActionPerformed

    private void buttonEditFamiliyMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditFamiliyMemActionPerformed
        // TODO add your handling code here:
        
        isNew = true;
        backGround = Color.WHITE;
        toggleEditAndBackground();
        String InsertSql = ("select * from familyhistorytable WHERE FamilyID="  + FamilyID.getText()); 
        try
        {
        //register the driver class
        //initialize
            Class.forName("com.mysql.cj.jdbc.Driver");
            //actual connect with login
            Connection con = DriverManager.getConnection(dburl, "root", "P@ssw0rd");
            PreparedStatement ps = con.prepareStatement(InsertSql); //insert statement from above
            
            Statement  stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(InsertSql);
            
            //displays ALL informatin from a record into jTextfields
            while(rs.next())
            {
                FamilyID.setText(rs.getString("FamilyID"));
                Name.setText(rs.getString("Name"));
                Relation.setText(rs.getString("Relation"));
                CheckBoxAlive.setSelected(rs.getString("Alive").equals("1") ? true:false);
                checkboxLivesWPatient.setSelected(rs.getString("Lives with patient").equals("1") ? true:false); //IF 1 THEN = TRUE ELSE = FALSE
                MajorDisorder.setText(rs.getString("MajorDisorder"));
                SpecificTypeDisorder.setText(rs.getString("SpecificTypeDisorder"));
                CheckBoxDisorderHRF.setSelected(rs.getString("DisorderHRF").equals("1") ? true:false); //IF 1 THEN = TRUE ELSE = FALSE
                
            
            }
             con.close(); //close connection
        }
        
        catch(SQLException e)
        {
            System.out.println("Error exceuting EDIT Operation!");
            e.printStackTrace();
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
      
        
        //call the getter currentPatientID
        getCurrentPatientID();
    }//GEN-LAST:event_buttonEditFamiliyMemActionPerformed

    private void SpecificTypeDisorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpecificTypeDisorderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpecificTypeDisorderActionPerformed

    private void buttonGenMedHisFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenMedHisFormActionPerformed
        // TODO add your handling code here:
        GeneralMedicalHistory form = new GeneralMedicalHistory(getCurrentPatientID());
        form.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_buttonGenMedHisFormActionPerformed

    private void buttonAllergyHisFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAllergyHisFormActionPerformed
        // TODO add your handling code here:
        // calls Allergy Form
        AllergyHistory form = new AllergyHistory(getCurrentPatientID());
        form.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_buttonAllergyHisFormActionPerformed

    private void buttonAddFamiliyMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddFamiliyMemActionPerformed
        // TODO add your handling code here:
        
        //make editable and background white
        isNew = true;
        backGround = Color.WHITE;
        toggleEditAndBackground();
        //resets text
        resetTextInTableFamily();
                                                       
    }//GEN-LAST:event_buttonAddFamiliyMemActionPerformed

    private void buttonSaveFamiliyMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveFamiliyMemActionPerformed
        // TODO add your handling code here:
        isNew = false;
        //change form background color to lightgrey
        backGround = Color.lightGray;
        toggleEditAndBackground();
       
        
        
        String name = Name.getText();
        String relation = Relation.getText();
        String alive = CheckBoxAlive.isSelected()? "1" : "0"; //true : false     ternary operation
        String livesWithPatient = checkboxLivesWPatient.isSelected()? "1" : "0";
        String majorDisorder = MajorDisorder.getText();
        String specificTypeDisorder = SpecificTypeDisorder.getText();
        String disorderHRF = CheckBoxDisorderHRF.isSelected()? "1" : "0";
        initializePatientIdField(PatientID.getText());

        
        
        String InsertSql = "INSERT INTO familyhistorytable (Name, Relation, Alive, `Lives with patient` ,MajorDisorder, SpecificTypeDisorder, DisorderHRF, PatientID) "
                + " VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
     
        //insert record
        try
        {
            DefaultTableModel Df = (DefaultTableModel) tabledemographics.getModel();
        
            int selectedRowIndex = tabledemographics.getSelectedRow();
            int PatientID = Integer.parseInt(Df.getValueAt(selectedRowIndex,0).toString());
            //register drive class
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, "root","P@ssw0rd");
            PreparedStatement ps = con.prepareStatement(InsertSql);
            
            
            ps.setString(1, name); //1 = first ? from above
            ps.setString(2, relation);//2 = second ? from above
            ps.setString(3, alive);
            ps.setString(4, livesWithPatient);
            ps.setString(5, majorDisorder);
            ps.setString(6, specificTypeDisorder);
            ps.setString(7, disorderHRF);
            ps.setInt(8,PatientID);
            int rowCount = ps.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Record Added Succesfully");
            
            //makes textfields back to blank
            resetTextInTableFamily();
            
            
            table_update();
            con.close();
            
        }
        catch(SQLException e)
        {
            
            System.out.println("Error executing INSERT Operation");
            e.printStackTrace();
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_buttonSaveFamiliyMemActionPerformed

    private void buttonDeleteFamiliyMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteFamiliyMemActionPerformed
        // TODO add your handling code here:
        
        String InsertSQL = "DELETE from familyhistorytable WHERE FamilyID=?"; 
        try
        {
        //register the driver class
        //initialize
            Class.forName("com.mysql.cj.jdbc.Driver");
            //actual connect with login
            Connection con = DriverManager.getConnection(dburl, "root", "P@ssw0rd");
            PreparedStatement ps = con.prepareStatement(InsertSQL); //insert statement from above
            
             //1 = first ? from above
            ps.setString(1, FamilyID.getText());
            ps.executeUpdate();
            con.close(); //close connection
        }
        
        catch(SQLException e)
        {
            System.out.println("Error exceuting INSERT Operation!");
            e.printStackTrace();
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
        
        //CODE BELOW REMOVES ROW FROM JTABLE
        
        
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        
        //delete row
        if(jTable1.getSelectedRowCount()==1)
        {
            tblModel.removeRow(jTable1.getSelectedRow());
        }
        else
        {
            if(jTable1.getRowCount()==0)
            {
                //if table is empty(no data) than display message
                JOptionPane.showMessageDialog(this, "Table is empty.");
            }
            else //if table isnt empty but user did not select a row
            {
                JOptionPane.showMessageDialog(this, "Please select a row to be deleted.");
            }
        }
        
        JOptionPane.showMessageDialog(null, "Patient data is removed.");
        resetTextInTableFamily();
    }//GEN-LAST:event_buttonDeleteFamiliyMemActionPerformed

    private void buttonCloseFamiliyMemFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseFamiliyMemFormActionPerformed
        // TODO add your handling code here:
        //calls Medication History Form
        PatientDemographics form = new PatientDemographics ();
        form.setVisible(true);
        this.setVisible(false);
        resetTextInTableFamily();
    }//GEN-LAST:event_buttonCloseFamiliyMemFormActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        isNew = false;
        backGround = Color.lightGray;
        toggleEditAndBackground();
        
        
        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
        
        int selectedRowIndex = jTable1.getSelectedRow();

        
        
        
        String InsertSQL = "UPDATE familyhistorytable SET Name=?, Relation=?, Alive=?, `Lives with patient`=? ,MajorDisorder=?, SpecificTypeDisorder=?,"
                + " DisorderHRF=? where FamilyID=?"; 
        
        //updates record in database
        try
        {
            int id = Integer.parseInt(Df.getValueAt(selectedRowIndex,0).toString());
            
        //register the driver class
        //initialize
            Class.forName("com.mysql.cj.jdbc.Driver");
            //actual connect with login
            Connection con = DriverManager.getConnection(dburl, "root", "P@ssw0rd");
            PreparedStatement ps = con.prepareStatement(InsertSQL); //insert statement from above
            String name = Name.getText();
            String relation = Relation.getText();
            String alive = CheckBoxAlive.isSelected()? "1" : "0";
            String livesWithPatient = checkboxLivesWPatient.isSelected()? "1" : "0";
            String majorDisorder = MajorDisorder.getText();
            String specificTypeDisorder = SpecificTypeDisorder.getText();
            String disorderHRF = CheckBoxDisorderHRF.isSelected()? "1" : "0";
            initializePatientIdField(PatientID.getText());
            
            ps.setString(1, name); //1 = first ? from above
            ps.setString(2, relation);//2 = second ? from above
            ps.setString(3, alive);
            ps.setString(4, livesWithPatient);
            ps.setString(5, majorDisorder);
            ps.setString(6, specificTypeDisorder);
            ps.setString(7, disorderHRF);
            ps.setInt(8, id);
            
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Record was Updated");
            table_update();
            resetTextInTableFamily();
            
            
            con.close(); //close connection
        }
        
        catch(SQLException e)
        {
            System.out.println("Error exceuting UPDATING Operation!");
            e.printStackTrace();
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void CheckBoxAliveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxAliveActionPerformed
        // TODO add your handling code here:
        CheckBoxAlive.setSelected(toggleIsAlive());//makes checkbox true
        

        
    }//GEN-LAST:event_CheckBoxAliveActionPerformed

    private void checkboxLivesWPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxLivesWPatientActionPerformed
        // TODO add your handling code here:
        checkboxLivesWPatient.setSelected(toggleLivesWPatient()); //makes checkbox true
    }//GEN-LAST:event_checkboxLivesWPatientActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel Df = (DefaultTableModel)jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
        
        //displays data when clicking on a record
        FamilyID.setText(Df.getValueAt(selectedIndex, 0).toString());
        Name.setText(Df.getValueAt(selectedIndex, 1).toString());
        Relation.setText(Df.getValueAt(selectedIndex, 2).toString());

    }//GEN-LAST:event_jTable1MouseClicked

    private void CheckBoxDisorderHRFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckBoxDisorderHRFMouseClicked
        // TODO add your handling code here:
        CheckBoxDisorderHRF.setSelected(toggleHRF()); //makes checkbox true
    }//GEN-LAST:event_CheckBoxDisorderHRFMouseClicked
    private boolean toggleHRF()
     {
            return !isHRF; //returns true
                    
     }
    private boolean toggleLivesWPatient()
     {
         return !isLivingWP; //returns true
     }
    private boolean toggleIsAlive()
    {
        return !isAlive; //returns true
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamilyHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FamilyHistory(PatientDemographics.getCurrentPatientID()).setVisible(true);
            }
        });
    }
     private static void initializePatientIdField(String patientID)
    {
        PatientID.setText(patientID);
        
    }
     private static void toggleEditAndBackground(){
         
        //makes jTextfields noneditable
       Name.setEditable(isNew);
       Relation.setEditable(isNew);
       MajorDisorder.setEditable(isNew);
       SpecificTypeDisorder.setEditable(isNew);
       
        //makes backGround color to default - lightGray
       Name.setBackground(backGround);
       Relation.setBackground(backGround);
       CheckBoxAlive.setBackground(backGround);
       checkboxLivesWPatient.setBackground(backGround);
       MajorDisorder.setBackground(backGround);
       SpecificTypeDisorder.setBackground(backGround);
       CheckBoxDisorderHRF.setBackground(backGround);
    }
    //Author Sharyl Riley
    private static void resetTextInTableFamily(){
        //resets text fields
        FamilyID.setText("");
        Name.setText("");
        Relation.setText("");
        CheckBoxAlive.setSelected(isAlive=false);
        checkboxLivesWPatient.setSelected(isLivingWP=false);
        MajorDisorder.setText("");
        SpecificTypeDisorder.setText("");
        CheckBoxDisorderHRF.setSelected(isHRF=false);
    }
    //Author Sharyl Riley
    // variables for toggleEditAndBackground Method (global variables)
    private static boolean isAlive = false;
    private static boolean isLivingWP = false;
    private static boolean isHRF = false;
    private static boolean isNew = false;
    private static Color backGround = Color.LIGHT_GRAY;
    private static String currentPatientID;
    private static String dburl = "jdbc:mysql://localhost:3306/genmedhis?autoconnect=true&useSSL=false"; //connection string of the database

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JCheckBox CheckBoxAlive;
    public static javax.swing.JCheckBox CheckBoxDisorderHRF;
    public static javax.swing.JTextField FamilyID;
    public static javax.swing.JTextField MajorDisorder;
    public static javax.swing.JTextField Name;
    public static javax.swing.JTextField PatientID;
    public static javax.swing.JTextField Relation;
    public static javax.swing.JTextField SpecificTypeDisorder;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton buttonAddFamiliyMem;
    private javax.swing.JButton buttonAllergyHisForm;
    private javax.swing.JButton buttonCloseFamiliyMemForm;
    private javax.swing.JButton buttonDeleteFamiliyMem;
    private javax.swing.JButton buttonEditFamiliyMem;
    private javax.swing.JButton buttonGenMedHisForm;
    private javax.swing.JButton buttonImmunizationHisForm;
    private javax.swing.JButton buttonMedicationHisForm;
    private javax.swing.JButton buttonSaveFamiliyMem;
    public static javax.swing.JCheckBox checkboxLivesWPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
